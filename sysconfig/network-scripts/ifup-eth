#!/bin/bash
# Network Interface Configuration System
# Copyright (c) 1996-2014 Red Hat, Inc. all rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2,
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

PATH=/sbin:/usr/sbin:/bin:/usr/bin
TEXTDOMAIN=initscripts

. /etc/init.d/functions

cd /etc/sysconfig/network-scripts
. ./network-functions

[ -f /etc/sysconfig/network ] && . /etc/sysconfig/network

CONFIG=${1}
boot=${2}
daemon=
[ "foo${boot}" = "fooboot" -o "foo${boot}" = "foodaemon" ] && daemon=1

need_config "${CONFIG}"

source_config

# Old BOOTP variable
if [ "${BOOTP}" = "yes" ]; then
    BOOTPROTO=bootp
fi

if [ "${BOOTPROTO}" = "bootp" -o "${BOOTPROTO}" = "dhcp" ]; then
    DYNCONFIG=true
    [ "${BOOTPROTO}" = bootp ] && DHCP_CLIENT=/sbin/pump
fi

# load the module associated with that device
# /sbin/modprobe ${REALDEVICE}
is_available ${REALDEVICE}

# bail out, if the MAC does not fit
if [ -n "${HWADDR}" ]; then
    FOUNDMACADDR=$(get_hwaddr ${REALDEVICE})
    if [ "${FOUNDMACADDR}" != "${HWADDR}" -a "${FOUNDMACADDR}" != "${MACADDR}" ]; then
	    net_log $"Device ${DEVICE} has different MAC address than expected, ignoring."
	    mdv-network-event connection_failure ${DEVICE}
	    exit 1
    fi
fi

# If the device is a bridge, create it with brctl, if available.
if [ "${TYPE}" = "Bridge" ]; then
      if [ ! -x /usr/sbin/brctl ]; then
	  net_log $"Bridge support not available: brctl not found"
	  mdv-network-event connection_failure ${DEVICE}
	  exit 1
      fi
      if [ ! -d /sys/class/net/${DEVICE}/bridge ]; then
		/usr/sbin/brctl addbr -- ${DEVICE} || exit 1
      fi
      [ -n "${DELAY}" ] && /usr/sbin/brctl setfd -- ${DEVICE} ${DELAY}
      [ -n "${STP}" ] && /usr/sbin/brctl stp -- ${DEVICE} ${STP}
      [ -n "${PRIO}" ] && /usr/sbin/brctl setbridgeprio ${DEVICE} ${PRIO}
      [ -n "${AGEING}" ] && /usr/sbin/brctl setageing ${DEVICE} ${AGEING}
      # add the bits to setup driver parameters here
      for arg in $BRIDGING_OPTS ; do
          key=${arg%%=*};
          value=${arg##*=};
          if [ "${key}" != "multicast_router" -a "${key}" != "hash_max" -a "${key}" != "multicast_snooping" ]; then
              echo $value > /sys/class/net/${DEVICE}/bridge/$key
          fi
      done
      # set LINKDELAY (used as timeout when calling check_link_down())
      # to at least (${DELAY} * 2) + 7 if STP is enabled. This is the
      # minimum time required for /sys/class/net/$REALDEVICE/carrier to
      # become 1 after "ip link set dev $DEVICE up" is called.
      if [ "${STP}" = "yes" -o "${STP}" = "on" ]; then
          TMPD=7
          [ -n "${DELAY}" ] && TMPD=$(expr ${DELAY} \* 2 + ${TMPD})
          [ 0$LINKDELAY -lt $TMPD ] && LINKDELAY=$TMPD
      fi
fi

# Create tap device.
if [ "${TYPE}" = "Tap" ]; then
      [ -n "${OWNER}" ] && OWNER="user ${OWNER}"
      TUNMODE="mode tap"
      [[ ${DEVICE} == tun* ]] && TUNMODE="mode tun"
      ip tuntap add ${TUNMODE} ${OWNER} dev ${DEVICE} > /dev/null
fi

# now check the real state
is_available_wait ${REALDEVICE} ${DEVTIMEOUT} || {
      if [ -n "$alias" ]; then
         net_log $"$alias device ${DEVICE} does not seem to be present, delaying initialization."
      else
         net_log $"Device ${DEVICE} does not seem to be present, delaying initialization."
      fi
      mdv-network-event connection_failure ${DEVICE}
      exit 1
}

# is the device wireless? If so, configure wireless device specifics
IS_WIRELESS=
if is_wireless_device ${DEVICE}; then
    # ralink devices need to be up for wireless-tools to work
    ip link set dev ${DEVICE} up
    if [ -n "${daemon}" -o "$MII_NOT_SUPPORTED" = "yes" ]; then
        # try to trigger association (and always load wireless settings)
	WIRELESS_CONFIG="wireless.d/$WIRELESS_ESSID"
	[ -f "$WIRELESS_CONFIG" ] && source "$WIRELESS_CONFIG"
	. ./ifup-wireless
        if [ -n "$WIRELESS_WPA_DRIVER" -a -x /usr/sbin/wpa_supplicant -a -f /etc/wpa_supplicant.conf ]; then
            if wpa_cli -i${DEVICE} status &>/dev/null; then
                echo "Another wpa_supplicant instance is already running for device $DEVICE"
            else
                /usr/sbin/wpa_supplicant -B -i ${DEVICE} \
                    -c /etc/wpa_supplicant.conf  \
                    -D ${WIRELESS_WPA_DRIVER}
            fi
            if [ "$WIRELESS_WPA_REASSOCIATE" = "yes" ]; then
                sleep 2
                wpa_cli reassociate
            fi
	fi
    elif [ -n "$WIRELESS_WPA_DRIVER" ]; then
        # roaming enabled, on association
        # source interface parameters related to current ESSID or AP if any
        WIRELESS_CURRENT_ESSID=`iwgetid -r ${DEVICE}`
        if [ -n "$WIRELESS_CURRENT_ESSID" ]; then
            WIRELESS_CONFIG="wireless.d/$WIRELESS_CURRENT_ESSID"
            if [ ! -f "$WIRELESS_CONFIG" ]; then
                WIRELESS_CURRENT_AP=`iwgetid -r -a ${DEVICE}`
                WIRELESS_CONFIG="wireless.d/$WIRELESS_CURRENT_AP"
            fi
            if [ -f "$WIRELESS_CONFIG" ]; then
                source "$WIRELESS_CONFIG"
            else
                echo "Wireless device $DEVICE is associated with $WIRELESS_CURRENT_ESSID but configuration is missing"
            fi
        else
            echo "Wireless device $DEVICE is configured with a roaming daemon but isn't associated"
        fi
    fi
    IS_WIRELESS=1
fi

# DVB Card
if [ -n "${DVB_ADAPTER_ID}" -a -n "${DVB_NETWORK_DEMUX}" -a -n "${DVB_NETWORK_PID}" ]; then
       dvbnet -a ${DVB_ADAPTER_ID} -n ${DVB_NETWORK_DEMUX} -p ${DVB_NETWORK_PID}
fi

# ATMARP protocol support, enabled if ATM_ADDR is defined (VCI.VPI)
# useful for modems using the atm kernel module (e.g. Speedtouch)
# and ISP using "RFC 1483 Routed VC MUX" (e.g. Free Degroupe)
if [ -n "${ATM_ADDR}" -a -x /usr/sbin/atmarpd -a -x /usr/sbin/atmarp ]; then
      pidof atmarpd >/dev/null 2>&1 || /usr/sbin/atmarpd -b -l syslog >/dev/null 2>&1
      atmarp -c ${DEVICE} 2>/dev/null
fi 

# this isn't the same as the MAC in the configuration filename.  It is
# available as a configuration option in the config file, forcing the kernel
# to think an ethernet card has a different MAC address than it really has.
if [ -n "${MACADDR}" ]; then
   ip link set dev ${DEVICE} address ${MACADDR}
fi
if [ -n "${MTU}" ]; then
   ip link set dev ${DEVICE} mtu ${MTU}
fi

# slave device?
if [ "${SLAVE}" = yes -a "${ISALIAS}" = no -a "${MASTER}" != "" ]; then
    install_bonding_driver ${MASTER}
    grep -wq "${DEVICE}" /sys/class/net/${MASTER}/bonding/slaves 2>/dev/null || {
	/sbin/ip link set dev ${DEVICE} down
	echo "+${DEVICE}" > /sys/class/net/${MASTER}/bonding/slaves 2>/dev/null
    }
    ethtool_set

    exit 0
fi

# Bonding initialization. For DHCP, we need to enslave the devices early,
# so it can actually get an IP.
if [ "$ISALIAS" = no ] && is_bonding_device ${DEVICE} ; then
    install_bonding_driver ${DEVICE}
    /sbin/ip link set dev ${DEVICE} up
    for device in $(LANG=C grep -l "^[[:space:]]*MASTER=['\"]\?${DEVICE}['\"]\?\([[:space:]#]\|$\)" /etc/sysconfig/network-scripts/ifcfg-*) ; do
	    is_ignored_file "$device" && continue
	    /sbin/ifup ${device##*/} || net_log "Unable to start slave device ${device##*/} for master ${DEVICE}." warning
    done

    [ -n "${LINKDELAY}" ] && /bin/sleep ${LINKDELAY}

    # add the bits to setup the needed post enslavement parameters
    for arg in $BONDING_OPTS ; do   
        key=${arg%%=*};
        value=${arg##*=};
	if [ "${key}" = "primary" ]; then 
            echo $value > /sys/class/net/${DEVICE}/bonding/$key
	fi
    done
fi

# If the device is part of a bridge, add the device to the bridge
if [ -n "${BRIDGE}" ] && [ -x /usr/sbin/brctl ]; then
      if [ ! -d /sys/class/net/${BRIDGE}/bridge ]; then
	  /usr/sbin/brctl addbr -- ${BRIDGE} 2>/dev/null
      fi
      /sbin/ip addr flush dev ${DEVICE} 2>/dev/null
      /sbin/ip link set dev ${DEVICE} up
      ethtool_set
      [ -n "${LINKDELAY}" ] && /bin/sleep ${LINKDELAY}
      /usr/sbin/brctl addif -- ${BRIDGE} ${DEVICE}
      # add the bits to setup driver parameters here
      for arg in $BRIDGING_OPTS ; do
          key=${arg%%=*};
          value=${arg##*=};
          echo $value > /sys/class/net/${DEVICE}/brport/$key
      done
      # Upon adding a device to a bridge,
      # it's necessary to make radvd reload its config
      [ -r /var/run/radvd/radvd.pid ] && kill -HUP $(cat /var/run/radvd/radvd.pid)
      exit 0
fi
		     
# exec ifplugd daemon at boot if supported
if [ -n "${daemon}" -a "$MII_NOT_SUPPORTED" != "yes" ]; then
    IFPLUGD_ARGS="${IFPLUGD_ARGS=-I -b}"
    exec /sbin/ifplugd $IFPLUGD_ARGS -i $DEVICE
fi


BLURB="# temporary ifup addition"

if [ -n "$DYNCONFIG" -a "XXX$DHCP_CLIENT" = "XXX" ];then
    if [ -x /sbin/dhclient ];then
	DHCP_CLIENT=/sbin/dhclient
	# Remove any temporary references which were previously added to dhclient config
	if [ -w /etc/dhclient-${DEVICE}.conf -a -x /sbin/dhclient ] ; then
	    grep -v "$BLURB" /etc/dhclient-${DEVICE}.conf > /etc/dhclient-${DEVICE}.conf.ifupnew 2> /dev/null
	    cat /etc/dhclient-${DEVICE}.conf.ifupnew > /etc/dhclient-${DEVICE}.conf
	    rm -f /etc/dhclient-${DEVICE}.conf.ifupnew
	fi
    elif [ -x /sbin/dhcpcd ];then
	DHCP_CLIENT=/sbin/dhcpcd
    elif [ -x /sbin/pump ];then
	DHCP_CLIENT=/sbin/pump
    elif [ -x /sbin/dhcpxd ];then
	DHCP_CLIENT=/sbin/dhcpxd
    else 
	echo $"Can't find a dhcp client"
	mdv-network-event connection_failure ${DEVICE}
	exit 1;
    fi
fi  

if [ "$DHCP_HOSTNAME" ] && [ "$DOMAINNAME" ]
then
	DHCP_HOSTNAME=`echo $DHCP_HOSTNAME | sed -e "s/\.$DOMAINNAME//g"`
fi

DHCP_ARGS=
if [ "XXX$DHCP_CLIENT" != "XXX" ];then
case $(basename $DHCP_CLIENT) in
    dhcpcd)
    DHCP_ARGS="--waitip"
    [ -n "${DHCP_HOSTNAME}" ] && DHCP_ARGS="${DHCP_ARGS} -h ${DHCP_HOSTNAME}"
    [ "${PEERDNS}" = "no" ] && DHCP_ARGS="${DHCP_ARGS} -C resolv.conf"
    [ "${PEERGATEWAY}" = "no" ] && DHCP_ARGS="${DHCP_ARGS} -G"
    [ -n "${DHCP_TIMEOUT}" ] && DHCP_ARGS="${DHCP_ARGS} -t ${DHCP_TIMEOUT}"
    [ "${NEEDHOSTNAME}" = "no" ] && DHCP_ARGS="${DHCP_ARGS} -C lookup-hostname"
    if [ "${PEERNTPD}" = "yes" ]; then
        DHCP_ARGS="${DHCP_ARGS} -o ntp_servers"
    else
        DHCP_ARGS="${DHCP_ARGS} -C ntp.conf -O ntp_servers"
    fi
    if [ "${PEERYP}" = "yes" ]; then
        DHCP_ARGS="${DHCP_ARGS} -o nis_domain -o nis_servers"
    else
        DHCP_ARGS="${DHCP_ARGS} -C yp.conf -C ypbind -O nis_domain -O nis_servers"
    fi

    DHCP_ARGS="${DHCP_ARGS} ${DEVICE}"
    PIDF=/var/run/dhcpcd-${DEVICE}.pid
    if [[ -f ${PIDF} ]]; then
        PID=$(cat ${PIDF})
        if [[ -n ${PID} ]]; then
            echo "dhcpcd is running, ifdown the interface first"
            exit;
        fi
        /bin/rm -f ${PIDF}; #clear it
    fi
    ;;
    pump)
    [ -n "$DHCP_HOSTNAME" ] && DHCP_ARGS="-h $DHCP_HOSTNAME"
    [ "${NEEDHOSTNAME}" = "yes" ] && DHCP_ARGS="$DHCP_ARGS --lookup-hostname"
    [ "${PEERDNS}" = "no" ] && DHCP_ARGS="$DHCP_ARGS -d"
    [ "${PEERGATEWAY}" = "no" ] && DHCP_ARGS="$DHCP_ARGS --no-gateway"
    DHCP_ARGS="$DHCP_ARGS -i $DEVICE"
    ;;
    dhcpxd)
    # dhcpxd don't support NEEDHOSTNAME, PEERGATEWAY
    [ -n "$DHCP_HOSTNAME" ] && DHCP_ARGS="-H $HOSTNAME"
    DHCP_ARGS="$DHCP_ARGS --wait $DEVICE"
    ;;
    dhclient)
    if is_true "${PERSISTENT_DHCLIENT}"; then
	ONESHOT=
    else
	ONESHOT="-1"
    fi
    generate_config_file_name
    generate_lease_file_name
    DHCP_ARGS="$DHCP_ARGS $ONESHOT -q ${DHCLIENTCONF} -lf ${LEASEFILE} -pf /var/run/dhclient-${DEVICE}.pid $DEVICE"
    if [ -n "$DHCP_HOSTNAME" ]; then
	if [ ! -e /etc/dhclient-${DEVICE}.conf ] || ! grep -q "[^# ]*send *host-name" /etc/dhclient-${DEVICE}.conf; then
	    echo "send host-name \"${DHCP_HOSTNAME}\";  $BLURB" >> /etc/dhclient-${DEVICE}.conf
	fi
    fi
    if [ -n "$DHCP_TIMEOUT" ]; then
	if [ ! -e /etc/dhclient-${DEVICE}.conf ] || ! grep -q "[^# ]*timeout" /etc/dhclient-${DEVICE}.conf; then
	    echo "timeout $DHCP_TIMEOUT;  $BLURB" >> /etc/dhclient-${DEVICE}.conf
	fi
    fi	
    ;;
esac
fi

# Remove any temporary references which were previously added to dhclient config
if [ -w /etc/dhclient-${DEVICE}.conf ] && [ -x /sbin/dhclient ] ; then
   LC_ALL=C grep -v "# temporary MDK ifup addition" /etc/dhclient-${DEVICE}.conf > /etc/dhclient-${DEVICE}.conf.ifupnew 2> /dev/null
   cat /etc/dhclient-${DEVICE}.conf.ifupnew > /etc/dhclient-${DEVICE}.conf
   rm -f /etc/dhclient-${DEVICE}.conf.ifupnew
fi
		     
if [ -n "${DYNCONFIG}" ]; then
    echo
    echo -n $"Determining IP information for ${DEVICE}..."
    if ! is_true "${PERSISTENT_DHCLIENT}" && check_link_down ${DEVICE}; then
	echo $" failed; no link present.  Check cable?"
	ip link set dev ${DEVICE} down >/dev/null 2>&1
	mdv-network-event connection_failure ${DEVICE}
	exit 1
    fi

    ethtool_set

    mdv-network-event dhcp_request ${DEVICE}
    if $DHCP_CLIENT $DHCP_ARGS ; then
        mdv-network-event dhcp_success ${DEVICE}
	echo $" done."
	dhcpipv4="good"
    else
        mdv-network-event dhcp_failure ${DEVICE}
	# Associate a zeroconf IP address to an alias of the interface
	if [ -x /sbin/zcip ]; then
            mdv-network-event zcip_request ${DEVICE}
	    if /sbin/zcip -s -i $DEVICE:${ZEROCONF_ALIAS_NUMER=9}; then
                mdv-network-event zcip_success ${DEVICE}
		echo $" done."
		if [ -x /etc/init.d/tmdns ]; then
		    /etc/init.d/tmdns reload > /dev/null 2>&1
		fi
		exit 0
	    fi
	fi
        mdv-network-event zcip_failure ${DEVICE}
	echo $" failed."
	mdv-network-event connection_failure ${DEVICE}
	exit 1
    fi
# end dynamic device configuration
else 
    if [ -z "${IPADDR}" -a -z "${IPADDR0}" -a -z "${IPADDR1}" -a -z "${IPADDR2}" ]; then
         # enable device without IP, useful for e.g. PPPoE
	 ip link set dev ${REALDEVICE} up
	 ethtool_set
	 [ -n "${LINKDELAY}" ] && /bin/sleep ${LINKDELAY}
    else
  
    expand_config

    [ -n "${ARP}" ] && \
	ip link set dev ${REALDEVICE} $(toggle_value arp $ARP)
   
    if ! ip link set dev ${REALDEVICE} up ; then
	net_log $"Failed to bring up ${DEVICE}."
	mdv-network-event connection_failure ${DEVICE}
	exit 1
    fi

    ethtool_set

    [ -n "${LINKDELAY}" ] && /bin/sleep ${LINKDELAY}

    if [ "${DEVICE}" = "lo" ]; then
    	SCOPE="scope host"
    else
        SCOPE=${SCOPE:-}
    fi
    
    if [ -n "$SRCADDR" ]; then
       SRC="src $SRCADDR"
    else
       SRC=
    fi
    
    if [ "${REALDEVICE}" != "lo" ]; then
    # set IP address(es)
    for idx in {0..256} ; do
	if [ -z "${ipaddr[$idx]}" ]; then
            break
        fi

        if ! LC_ALL=C ip addr ls ${REALDEVICE} | LC_ALL=C grep -q "${ipaddr[$idx]}/${prefix[$idx]}" ; then
            [ "${REALDEVICE}" != "lo" ] && [ "${arpcheck[$idx]}" != "no" ] && \
            if ! /usr/sbin/arping -q -c 2 -w ${ARPING_WAIT:-3} -D -I ${REALDEVICE} ${ipaddr[$idx]}; then
                net_log $"Error, some other host already uses address ${ipaddr[$idx]}."
                mdv-network-event connection_failure ${DEVICE}
                exit 1
            fi

            if ! ip addr add ${ipaddr[$idx]}/${prefix[$idx]} \
              brd ${broadcast[$idx]:-+} dev ${REALDEVICE} ${SCOPE} label ${DEVICE}; then
                net_log $"Error adding address ${ipaddr[$idx]} for ${DEVICE}."
            fi
        fi

        if [ -n "$SRCADDR" ]; then
               sysctl -w "net.ipv4.conf.${SYSCTLDEVICE}.arp_filter=1" >/dev/null 2>&1
        fi

        # update ARP cache of neighboring computers
        if [ "${REALDEVICE}" != "lo" ]; then
          /usr/sbin/arping -q -A -c 1 -I ${REALDEVICE} ${ipaddr[$idx]}
          ( sleep 2;
            /usr/sbin/arping -q -U -c 1 -I ${REALDEVICE} ${ipaddr[$idx]} ) > /dev/null 2>&1 < /dev/null &
        fi

        # set lifetime of address to forever
        ip addr change ${ipaddr[$idx]}/${prefix[$idx]} dev ${REALDEVICE} valid_lft forever preferred_lft forever
    done
    fi

    # Set a default route.
    if [ "${DEFROUTE}" != "no" ] && [ -z "${GATEWAYDEV}" -o "${GATEWAYDEV}" = "${REALDEVICE}" ]; then
	# set up default gateway. replace if one already exists
	if [ -n "${GATEWAY}" ] && [ "$(ipcalc --network ${GATEWAY} ${netmask[0]} 2>/dev/null)" = "NETWORK=${NETWORK}" ]; then
	    if [ -n "${ATM_ADDR}" -a -x /usr/sbin/atmarpd -a -x /usr/sbin/atmarp ]; then
		ip link set dev ${REALDEVICE} down
		ip link set dev ${REALDEVICE} up
		sleep 2
		atmarp -s ${GATEWAY} ${ATM_ADDR} null 2>/dev/null
	    fi 
	    ip route replace default ${METRIC:+metric $METRIC} \
		${EXTRA_ROUTE_OPTS} \
		via ${GATEWAY} ${WINDOW:+window $WINDOW} ${SRC} \
		${GATEWAYDEV:+dev $GATEWAYDEV} ||
			net_log $"Error adding default gateway ${GATEWAY} for ${DEVICE}."
	elif [ "${GATEWAYDEV}" = "${DEVICE}" ]; then
	    ip route replace default ${METRIC:+metric $METRIC} \
		${EXTRA_ROUTE_OPTS} \
		${SRC} ${WINDOW:+window $WINDOW} dev ${REALDEVICE} ||
			net_log $"Error adding default gateway for ${REALDEVICE}."
	fi
    fi
    fi
fi

# Add Zeroconf route.
if [ "${NOZEROCONF}" != "yes" -a "${ISALIAS}" = "no" -a "${REALDEVICE}" != "lo" ]; then
    ip route add 169.254.0.0/16 dev ${REALDEVICE} metric $((1000 + $(cat /sys/class/net/${REALDEVICE}/ifindex))) scope link
fi

# Inform firewall which network zone (empty means default) this interface belongs to
if [ -x /usr/bin/firewall-cmd -a "${REALDEVICE}" != "lo" ]; then
    /usr/bin/firewall-cmd --zone="${ZONE}" --change-interface="${DEVICE}" > /dev/null 2>&1
fi

if [ "${TYPE}" = "Bridge" ]; then
    for arg in $BRIDGING_OPTS ; do
        key=${arg%%=*};
        value=${arg##*=};
        if [ "${key}" = "multicast_router" -o "${key}" = "hash_max" -o "${key}" = "multicast_snooping" ]; then
            echo $value > /sys/class/net/${DEVICE}/bridge/$key
        fi
    done
fi

# IPv6 initialisation?
/etc/sysconfig/network-scripts/ifup-ipv6 ${CONFIG}
if is_true "${DHCPV6C}" && [ -x /sbin/dhclient ]; then
    generate_config_file_name 6
    generate_lease_file_name 6
    echo
    echo -n $"Determining IPv6 information for ${DEVICE}..."
    if /sbin/dhclient -6 -1 ${DHCPV6C_OPTIONS} ${DHCLIENTCONF} -lf ${LEASEFILE} -pf /var/run/dhclient6-${DEVICE}.pid -H ${DHCP_HOSTNAME:-${HOSTNAME%%.*}} ${DEVICE} ; then
        echo $" done."
    else
        echo $" failed."
        if [ "${dhcpipv4}" = "good" -o -n "${IPADDR}" ]; then
            net_log "Unable to obtain IPv6 DHCP address ${DEVICE}." warning
        else
            exit 1
        fi
    fi
fi

exec /etc/sysconfig/network-scripts/ifup-post ${CONFIG} ${2}

